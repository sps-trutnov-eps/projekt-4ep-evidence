// <auto-generated />
using System;
using EvidenceProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EvidenceProject.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20221201191833_RenewMigration")]
    partial class RenewMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DialCodeProject", b =>
                {
                    b.Property<int>("Technology")
                        .HasColumnType("int");

                    b.Property<int>("projectTechnologyid")
                        .HasColumnType("int");

                    b.HasKey("Technology", "projectTechnologyid");

                    b.HasIndex("projectTechnologyid");

                    b.ToTable("DialCodeProject");
                });

            modelBuilder.Entity("EvidenceProject.Data.DataModels.Achievement", b =>
                {
                    b.Property<string>("name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("projectid")
                        .HasColumnType("int");

                    b.HasKey("name");

                    b.HasIndex("projectid");

                    b.ToTable("Achievement");
                });

            modelBuilder.Entity("EvidenceProject.Data.DataModels.DbFile", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Projectid")
                        .HasColumnType("int");

                    b.Property<byte[]>("fileData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("fileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Projectid");

                    b.ToTable("files");
                });

            modelBuilder.Entity("EvidenceProject.Data.DataModels.DialCode", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("Technology")
                        .HasColumnType("int");

                    b.Property<int>("_color")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("dialInfoid")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("dialInfoid");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("dialCodes");
                });

            modelBuilder.Entity("EvidenceProject.Data.DataModels.DialInfo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("dialInfos");
                });

            modelBuilder.Entity("EvidenceProject.Data.DataModels.Project", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("github")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("projectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("slack")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("State");

                    b.HasIndex("Type");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("EvidenceProject.Data.DataModels.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contactDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("studyField")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.Property<int>("Projectsid")
                        .HasColumnType("int");

                    b.Property<int>("assigneesid")
                        .HasColumnType("int");

                    b.HasKey("Projectsid", "assigneesid");

                    b.HasIndex("assigneesid");

                    b.ToTable("ProjectUser");
                });

            modelBuilder.Entity("EvidenceProject.Data.DataModels.AuthUser", b =>
                {
                    b.HasBaseType("EvidenceProject.Data.DataModels.User");

                    b.Property<bool?>("globalAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("id_key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("id_key")
                        .IsUnique()
                        .HasFilter("[id_key] IS NOT NULL");

                    b.HasIndex("username")
                        .IsUnique()
                        .HasFilter("[username] IS NOT NULL");

                    b.HasDiscriminator().HasValue("AuthUser");
                });

            modelBuilder.Entity("DialCodeProject", b =>
                {
                    b.HasOne("EvidenceProject.Data.DataModels.Project", null)
                        .WithMany()
                        .HasForeignKey("Technology")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvidenceProject.Data.DataModels.DialCode", null)
                        .WithMany()
                        .HasForeignKey("projectTechnologyid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EvidenceProject.Data.DataModels.Achievement", b =>
                {
                    b.HasOne("EvidenceProject.Data.DataModels.Project", "project")
                        .WithMany("projectAchievements")
                        .HasForeignKey("projectid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("project");
                });

            modelBuilder.Entity("EvidenceProject.Data.DataModels.DbFile", b =>
                {
                    b.HasOne("EvidenceProject.Data.DataModels.Project", null)
                        .WithMany("files")
                        .HasForeignKey("Projectid");
                });

            modelBuilder.Entity("EvidenceProject.Data.DataModels.DialCode", b =>
                {
                    b.HasOne("EvidenceProject.Data.DataModels.DialInfo", "dialInfo")
                        .WithMany("dialCodes")
                        .HasForeignKey("dialInfoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("dialInfo");
                });

            modelBuilder.Entity("EvidenceProject.Data.DataModels.Project", b =>
                {
                    b.HasOne("EvidenceProject.Data.DataModels.DialCode", "projectState")
                        .WithMany()
                        .HasForeignKey("State")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EvidenceProject.Data.DataModels.DialCode", "projectType")
                        .WithMany()
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("projectState");

                    b.Navigation("projectType");
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.HasOne("EvidenceProject.Data.DataModels.Project", null)
                        .WithMany()
                        .HasForeignKey("Projectsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvidenceProject.Data.DataModels.User", null)
                        .WithMany()
                        .HasForeignKey("assigneesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EvidenceProject.Data.DataModels.DialInfo", b =>
                {
                    b.Navigation("dialCodes");
                });

            modelBuilder.Entity("EvidenceProject.Data.DataModels.Project", b =>
                {
                    b.Navigation("files");

                    b.Navigation("projectAchievements");
                });
#pragma warning restore 612, 618
        }
    }
}
